from flask import Blueprint, request, jsonify
# The Order model from src.models.order seems distinct and potentially incomplete/unused here.
# We will rely on the Order objects as defined and returned by OrderService.
# from src.models.order import Order 
from src.services.order_service import order_service # Import the service instance
import uuid # For generating order IDs if not provided

order_bp = Blueprint('order', __name__)

@order_bp.route('/orders', methods=['POST'])
def create_new_order_route(): # Renamed to avoid conflict if any
    data = request.json
    if not data:
        return jsonify({"error": "Request body is missing"}), 400

    customer_id = data.get('customer_id')
    items = data.get('items')
    # total_amount should ideally be calculated based on items and product prices,
    # or explicitly provided if the service doesn't calculate it.
    # OrderService.create_order expects it.
    total_amount = data.get('total_amount', 0.0) # Defaulting if not provided

    if not customer_id or not items:
        return jsonify({"error": "Missing customer_id or items"}), 400

    # OrderService.create_order expects an order_id.
    # This should ideally be generated by the service.
    # For now, we generate one here or expect it in `data`.
    order_id = data.get('order_id', str(uuid.uuid4()))

    try:
        new_order = order_service.create_order(
            order_id=order_id,
            customer_id=customer_id,
            items=items,
            total_amount=total_amount
        )
        # Serialize the Order object for JSON response
        return jsonify({
            "order_id": new_order.order_id,
            "customer_id": new_order.customer_id,
            "items": new_order.items,
            "status": new_order.status,
            "total_amount": new_order.total_amount,
            "created_at": new_order.created_at.isoformat(),
            "updated_at": new_order.updated_at.isoformat()
        }), 201
    except Exception as e:
        # Log the exception e
        return jsonify({"error": "Failed to create order", "details": str(e)}), 500

@order_bp.route('/orders/<string:order_id_param>', methods=['GET']) # Use string for order_id
def get_order_route(order_id_param: str): # Renamed function and parameter
    order_obj = order_service.get_order(order_id_param) # Use the service instance and correct method
    if order_obj:
        # Serialize the Order object for JSON response
        return jsonify({
            "order_id": order_obj.order_id,
            "customer_id": order_obj.customer_id,
            "items": order_obj.items,
            "status": order_obj.status,
            "total_amount": order_obj.total_amount,
            "created_at": order_obj.created_at.isoformat(),
            "updated_at": order_obj.updated_at.isoformat()
        }), 200
    return jsonify({"error": "Order not found"}), 404